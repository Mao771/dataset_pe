import os
import time
import requests
import json
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Configuration
WATCH_DIR = r"tmp"
API_URL = "http://192.168.120.100:8080/detect_pe_malware"
LOG_FILE = r"scan_results.log"

# Metrics tracking
true_labels = []
predicted_labels = []
processing_times = []


def calculate_f1_acc(y_true, y_pred):
    classes = set(y_true)
    correct_predictions = 0
    precision_per_class = {}
    recall_per_class = {}
    f1_per_class = {}
    support = {}

    for true, pred in zip(y_true, y_pred):
        if true == pred:
            correct_predictions += 1
        support[true] = support.get(true, 0) + 1
    accuracy = correct_predictions / len(y_true)
    for cls in classes:
        tp = sum(1 for true, pred in zip(y_true, y_pred) if true == cls and pred == cls)  # True Positives
        fp = sum(1 for true, pred in zip(y_true, y_pred) if true != cls and pred == cls)  # False Positives
        fn = sum(1 for true, pred in zip(y_true, y_pred) if true == cls and pred != cls)  # False Negatives
        precision = tp / (tp + fp) if (tp + fp) > 0 else 0
        recall = tp / (tp + fn) if (tp + fn) > 0 else 0
        f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
        precision_per_class[cls] = precision
        recall_per_class[cls] = recall
        f1_per_class[cls] = f1
    weighted_f1 = sum(f1_per_class[cls] * support[cls] for cls in classes) / len(y_true)
    print("Accuracy:", accuracy)
    print("F1 Weighted Score:", weighted_f1)
    return accuracy, weighted_f1


def log_message(message):
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")
    print(message)


def process_file(file_path):
    global true_labels, predicted_labels, processing_times

    try:
        filename = os.path.basename(file_path)
        log_message(f"Processing file: {filename}")

        # Extract the expected result from the filename
        expected_result = filename.split("_")[-1].replace(".txt", "").strip()

        # Start timing
        start_time = time.time()

        # Send the file to the API
        with open(file_path, "rb") as f:
            response = requests.post(API_URL, files={"file": f})

        # End timing
        end_time = time.time()
        processing_time = end_time - start_time
        processing_times.append(processing_time)

        # Parse API response
        if response.status_code == 200:
            api_result = json.loads(response.text).get("ELF class", "unknown")
        else:
            log_message(f"API error: {response.status_code} - {response.text}")
            api_result = "unknown"

        # Log results
        log_message(f"File: {filename}, Expected: {expected_result}, Detected: {api_result}, Time: {processing_time:.2f}s")

        # Append results for metrics calculation
        true_labels.append(expected_result)
        predicted_labels.append(api_result)

    except Exception as e:
        log_message(f"Error processing file {file_path}: {e}")


class FileEventHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory and event.src_path.endswith(".txt"):
            process_file(event.src_path)


def main():
    # Ensure the log file exists
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w") as f:
            f.write("ClamAV Scan Analysis Log\n")

    log_message("Starting directory monitor...")
    event_handler = FileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, WATCH_DIR, recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
            if true_labels and predicted_labels:
                # Calculate and log metrics
                acc, f1 = calculate_f1_acc(true_labels, predicted_labels)
                avg_time = sum(processing_times) / len(processing_times) if processing_times else 0

                log_message(f"Accuracy: {acc}. F1: {f1}")
                log_message(f"Average Request Time: {avg_time:.2f}s")
    except KeyboardInterrupt:
        observer.stop()
        log_message("Stopping directory monitor...")
    observer.join()


if __name__ == "__main__":
    main()
