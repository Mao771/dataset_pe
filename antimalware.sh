# Define directories and API URL
$WatchDir = "C:\path\to\your\directory"
$LogFile = "C:\path\to\scan_results.log"
$ApiUrl = "https://example.com/endpoint"

# Initialize metrics
$TP = 0 # True Positives
$FP = 0 # False Positives
$TN = 0 # True Negatives
$FN = 0 # False Negatives
$TotalRequestTime = 0
$FileCount = 0

# Ensure the log file exists
if (!(Test-Path $LogFile)) {
    New-Item -Path $LogFile -ItemType File | Out-Null
}

# Write header to the log file
"Scan Results Log - $(Get-Date)" | Out-File -Append $LogFile

# Function to calculate metrics
function Calculate-Metrics {
    $Total = $TP + $FP + $TN + $FN
    if ($Total -eq 0) {
        Write-Output "No files processed."
        return
    }

    $Accuracy = ($TP + $TN) / $Total
    $Precision = if ($TP + $FP -gt 0) { $TP / ($TP + $FP) } else { 0 }
    $Recall = if ($TP + $FN -gt 0) { $TP / ($TP + $FN) } else { 0 }
    $F1 = if ($Precision + $Recall -gt 0) { 2 * ($Precision * $Recall) / ($Precision + $Recall) } else { 0 }
    $AvgTime = if ($FileCount -gt 0) { $TotalRequestTime / $FileCount } else { 0 }

    # Log metrics
    $Metrics = @"
Metrics:
Total Files: $Total
True Positives (TP): $TP
False Positives (FP): $FP
True Negatives (TN): $TN
False Negatives (FN): $FN
Accuracy: $Accuracy
Precision: $Precision
Recall: $Recall
F1 Score: $F1
Average Request Time: $AvgTime seconds
"@
    $Metrics | Out-File -Append $LogFile

    # Print to console
    Write-Output $Metrics
}

# Monitor the directory for new files
Write-Output "Monitoring directory: $WatchDir"
$FileSystemWatcher = New-Object System.IO.FileSystemWatcher
$FileSystemWatcher.Path = $WatchDir
$FileSystemWatcher.Filter = "*.*"
$FileSystemWatcher.IncludeSubdirectories = $false
$FileSystemWatcher.EnableRaisingEvents = $true

# Event handler for new files
Register-ObjectEvent $FileSystemWatcher Created -Action {
    # Wait briefly to ensure the file is completely written
    Start-Sleep -Seconds 1

    # Get the file details
    $FilePath = $Event.SourceEventArgs.FullPath
    $FileName = $Event.SourceEventArgs.Name
    Write-Output "Processing file: $FileName"

    # Extract expected result from filename
    $ExpectedResult = ($FileName -split "_")[-1] -replace ".txt", ""

    # Start timing the API request
    $StartTime = Get-Date

    # Send the file to the API
    try {
        $Response = Invoke-RestMethod -Uri $ApiUrl -Method Post -Form @{ file = Get-Item $FilePath }
        $DetectedResult = $Response."ELF class"
    } catch {
        Write-Output "Error sending file to API: $_"
        $DetectedResult = "error"
    }

    # End timing the API request
    $EndTime = Get-Date
    $RequestTime = ($EndTime - $StartTime).TotalSeconds
    $TotalRequestTime += $RequestTime
    $FileCount++

    Write-Output "File processed: $FileName, Detected: $DetectedResult, Expected: $ExpectedResult, Time: $RequestTime seconds"

    # Compare detected and expected results
    if ($DetectedResult -eq "virus" -and $ExpectedResult -eq "virus") {
        $TP++
    } elseif ($DetectedResult -eq "virus" -and $ExpectedResult -eq "clean") {
        $FP++
    } elseif ($DetectedResult -eq "clean" -and $ExpectedResult -eq "clean") {
        $TN++
    } elseif ($DetectedResult -eq "clean" -and $ExpectedResult -eq "virus") {
        $FN++
    }

    # Log the result
    "$(Get-Date): File=$FileName, Detected=$DetectedResult, Expected=$ExpectedResult, Time=$RequestTime" | Out-File -Append $LogFile
}

# Keep the script running
Write-Output "Press Ctrl+C to stop monitoring."
try {
    while ($true) {
        Start-Sleep -Seconds 1
    }
} finally {
    # Cleanup
    Unregister-Event -SourceIdentifier FileCreated
    $FileSystemWatcher.Dispose()
    Calculate-Metrics
    Write-Output "Monitoring stopped."
}
